[{"/Users/danielconstante/Desktop/React Portfolio/src/index.js":"1","/Users/danielconstante/Desktop/React Portfolio/src/reportWebVitals.js":"2","/Users/danielconstante/Desktop/React Portfolio/src/App.js":"3","/Users/danielconstante/Desktop/React Portfolio/src/components/MainComponent.js":"4","/Users/danielconstante/Desktop/React Portfolio/src/redux/configureStore.js":"5","/Users/danielconstante/Desktop/React Portfolio/src/components/HomeComponent.js":"6","/Users/danielconstante/Desktop/React Portfolio/src/components/ContactComponent.js":"7","/Users/danielconstante/Desktop/React Portfolio/src/components/AboutComponent.js":"8","/Users/danielconstante/Desktop/React Portfolio/src/redux/reducer.js":"9","/Users/danielconstante/Desktop/React Portfolio/src/shared/promotions.js":"10","/Users/danielconstante/Desktop/React Portfolio/src/shared/comments.js":"11","/Users/danielconstante/Desktop/React Portfolio/src/shared/campsites.js":"12","/Users/danielconstante/Desktop/React Portfolio/src/shared/partners.js":"13","/Users/danielconstante/Desktop/React Portfolio/src/components/CampsiteInfoComponent.js":"14","/Users/danielconstante/Desktop/React Portfolio/src/components/DirectoryComponent.js":"15","/Users/danielconstante/Desktop/React Portfolio/src/components/FooterComponent.js":"16","/Users/danielconstante/Desktop/React Portfolio/src/components/HeaderComponent.js":"17"},{"size":695,"mtime":1624376368672,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1624309160041,"results":"20","hashOfConfig":"19"},{"size":621,"mtime":1625072075953,"results":"21","hashOfConfig":"19"},{"size":2172,"mtime":1625073234662,"results":"22","hashOfConfig":"19"},{"size":223,"mtime":1625160080839,"results":"23","hashOfConfig":"19"},{"size":1108,"mtime":1625512893722,"results":"24","hashOfConfig":"19"},{"size":10897,"mtime":1625161410245,"results":"25","hashOfConfig":"19"},{"size":4478,"mtime":1624725571651,"results":"26","hashOfConfig":"19"},{"size":409,"mtime":1625073187029,"results":"27","hashOfConfig":"19"},{"size":303,"mtime":1624382674388,"results":"28","hashOfConfig":"19"},{"size":4243,"mtime":1624382652427,"results":"29","hashOfConfig":"19"},{"size":1242,"mtime":1624382603293,"results":"30","hashOfConfig":"19"},{"size":1054,"mtime":1624382665069,"results":"31","hashOfConfig":"19"},{"size":7660,"mtime":1625334526245,"results":"32","hashOfConfig":"19"},{"size":1438,"mtime":1624467178340,"results":"33","hashOfConfig":"19"},{"size":2282,"mtime":1625511969040,"results":"34","hashOfConfig":"19"},{"size":3125,"mtime":1625512111899,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"t9j856",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"/Users/danielconstante/Desktop/React Portfolio/src/index.js",[],["74","75"],"/Users/danielconstante/Desktop/React Portfolio/src/reportWebVitals.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/App.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/components/MainComponent.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/redux/configureStore.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/components/HomeComponent.js",["76"],"/Users/danielconstante/Desktop/React Portfolio/src/components/ContactComponent.js",["77","78","79","80","81","82","83"],"import React, { Component } from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = val => val && val.length;\nconst maxLength = len => val => !val || (val.length <= len);\nconst minLength = len => val => val && (val.length >= len);\nconst isNumber = val => !isNaN(+val);\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phoneNum: '',\n            email: '',\n            agree: false,\n            contactType: 'By Phone',\n            feedback: '',\n            touched: {\n                firstName: false,\n                lastName: false,\n                phoneNum: false,\n                email: false\n            }\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values) {\n        console.log('Current state is: ' + JSON.stringify(values));\n        alert('Current state is: ' + JSON.stringify(values));\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Breadcrumb>\n                            <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                            <BreadcrumbItem active>Contact Us</BreadcrumbItem>\n                        </Breadcrumb>\n                        <h2>Contact Us</h2>\n                        <hr />\n                    </div>\n                </div>\n\n                <div className=\"row row-content align-items-center\">\n                    <div className=\"col-sm-4\">\n                        <h5>Our Address</h5>\n                        <address>\n                            1 Nucamp Way<br />\n                            Seattle, WA 98001<br />\n                            U.S.A.\n                        </address>\n                    </div>\n                    <div className=\"col\">\n                        <a role=\"button\" className=\"btn btn-link\" href=\"tel:+12065551234\"><i className=\"fa fa-phone\" /> 1-206-555-1234</a><br />\n                        <a role=\"button\" className=\"btn btn-link\" href=\"mailto:fakeemail@fakeemail.co\"><i className=\"fa fa-envelope-o\" /> campsites@nucamp.co</a>\n                    </div>\n                </div>\n\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h2>Send us your Feedback</h2>\n                        <hr />\n                    </div>\n                    <div className=\"col-md-10\">\n                        <LocalForm onSubmit={values => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstName\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                <Control.text model=\".firstName\" id=\"firstName\" name=\"firstName\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, \n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstName\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastName\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastName\" id=\"lastName\" name=\"lastName\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastName\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"phoneNum\" md={2}>Phone</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".phoneNum\" id=\"phoneNum\" name=\"phoneNum\"\n                                        placeholder=\"Phone number\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(10),\n                                            maxLength: maxLength(15),\n                                            isNumber\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".phoneNum\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 10 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            validEmail\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid email address'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{ size: 4, offset: 2 }}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox\n                                                model=\".agree\"\n                                                name=\"agree\"\n                                                className=\"form-check-input\"\n                                            /> {' '}\n                                            <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={4}>\n                                    <Control.select model=\"contactType\" name=\"contactType\" className=\"form-control\">\n                                        <option>By Phone</option>\n                                        <option>By Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"feedback\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".feedback\" id=\"feedback\" name=\"feedback\"\n                                        rows=\"12\"\n                                        className=\"form-control\"\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{ size: 10, offset: 2 }}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;","/Users/danielconstante/Desktop/React Portfolio/src/components/AboutComponent.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/redux/reducer.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/shared/promotions.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/shared/comments.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/shared/campsites.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/shared/partners.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/components/CampsiteInfoComponent.js",["84","85","86"],"import React, { Component } from \"react\";\nimport {\n    Card, CardImg, CardText, CardBody, Breadcrumb, BreadcrumbItem,\n    Button, Modal, ModalHeader, ModalBody, Label, Row, Col\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = val => val && val.length;\nconst maxLength = len => val => !val || (val.length <= len);\nconst minLength = len => val => val && (val.length >= len);\n\nclass CommentForm extends Component {\n    constructor(props) {\n        super(props);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.state = {\n            isModalOpen: false,\n            rating: '1',\n            author: ' ',\n            comment: ' ',\n            touched: {\n                rating: false,\n                author: false,\n                comment: false\n            }\n        };\n    }\n\n    handleSubmit(values) {\n        console.log(\"Current state is: \" + JSON.stringify(values));\n        alert(\"Current state is: \" + JSON.stringify(values));\n        this.toggleModal()\n    }\n\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Button color=\"primary\" outline onClick={this.toggleModal}>\n                    <i className=\"fa fa-pencil fa-lg\" />\n                    Submit Comment\n                </Button>\n\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\n                    <ModalBody>\n                        <LocalForm onSubmit={values => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Col md={10}>\n                                    <Label htmlFor=\"rating\" >Rating</Label>\n                                    <Control.select model=\".rating\" id=\"rating\" name=\"rating\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                        }}>\n                                        <option>Select Rating</option>\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                        <option>4</option>\n                                        <option>5</option>\n                                    </Control.select>\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".rating\"\n                                        show=\"touched\" // \n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required'\n                                        }} />\n                                    <Label htmlFor=\"yourName\" >Your Name</Label>\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15),\n                                        }}>\n                                    </Control.text>\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".author\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }} />\n                                    <Label htmlFor=\"yourName\" >Comment</Label>\n                                    <Control.textarea model=\".text\" id=\"comment\" name=\"comment\"\n                                        className=\"form-control\"\n                                        rows=\"6\"\n                                        validators={{\n                                            required\n                                        }} />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".text\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required'\n                                        }} />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={10}>\n                                    <Button color=\"primary\" type=\"submit\">Submit</Button>{' '}\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\n\n\nfunction RenderCampsite({ campsite }) {\n    return (\n        <div className=\"col-md-5 m-1\">\n            <Card>\n                <CardImg top src={campsite.image} alt={campsite.name} />\n                <CardBody>\n                    <CardText>{campsite.description}</CardText>\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\n\nfunction RenderComments({ comments }) {\n    if (comments) {\n        return (\n            <div className=\"col-md-5 m-1\">\n                <h4>Comments</h4>\n                {comments.map((comment) => {\n                    return (\n                        <div key={comment.id}>\n                            <p>{comment.text}</p>\n                            <p>{`--${comment.author}, ${new Intl.DateTimeFormat(\"en-US\", {\n                                year: \"numeric\",\n                                month: \"short\",\n                                day: \"2-digit\",\n                            }).format(new Date(Date.parse(comment.date)))}`}</p>\n                        </div>\n                    );\n                })}\n                <CommentForm />\n            </div>\n        );\n    }\n    return <div />;\n}\n\n\n\n\nfunction CampsiteInfo(props) {\n    if (props.campsite) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Breadcrumb>\n                            <BreadcrumbItem><Link to=\"/directory\">Directory</Link></BreadcrumbItem>\n                            <BreadcrumbItem active>{props.campsite.name}</BreadcrumbItem>\n                        </Breadcrumb>\n                        <h2>{props.campsite.name}</h2>\n                        <hr />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <RenderCampsite campsite={props.campsite} />\n                    <RenderComments comments={props.comments} />\n                </div>\n            </div>\n        );\n    }\n    return <div />;\n}\n\nexport default CampsiteInfo;","/Users/danielconstante/Desktop/React Portfolio/src/components/DirectoryComponent.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/components/FooterComponent.js",[],"/Users/danielconstante/Desktop/React Portfolio/src/components/HeaderComponent.js",["87","88","89","90","91","92","93","94"],"import React, { Component } from 'react';\nimport {\n    Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron,\n    Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Input, Label\n} from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false\n        };\n\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav() {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Jumbotron fluid>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <h1>Daniel Constante</h1>\n                                <h2>Web Developer</h2>\n                            </div>\n                        </div>\n                    </div>\n                </Jumbotron>\n                <Navbar dark sticky=\"top\" expand=\"md\">\n                    <div className=\"container\">\n                        <NavbarBrand className=\"mr-auto\"></NavbarBrand>\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/home\">\n                                        <i className=\"fa fa-home fa-lg\" /> Home\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/about\">\n                                        <i className=\"fa fa-info-circle fa-lg\" /> About\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/portfolio\">\n                                        <i className=\"fa fa-briefcase fa-lg\" /> Portfolio\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/resume\">\n                                        <i className=\"fa fa-file fa-lg\" /> Resume\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/contact\">\n                                        <i className=\"fa fa-address-card fa-lg\" /> Contact \n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":9,"column":10,"nodeType":"101","messageId":"102","endLine":9,"endColumn":20},{"ruleId":"103","severity":1,"message":"104","line":80,"column":33,"nodeType":"105","messageId":"106","endLine":88,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":105,"column":37,"nodeType":"105","messageId":"106","endLine":113,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":130,"column":37,"nodeType":"105","messageId":"106","endLine":139,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":157,"column":37,"nodeType":"105","messageId":"106","endLine":164,"endColumn":39},{"ruleId":"103","severity":1,"message":"107","line":181,"column":45,"nodeType":"105","messageId":"106","endLine":185,"endColumn":47},{"ruleId":"103","severity":1,"message":"108","line":191,"column":37,"nodeType":"105","messageId":"106","endLine":191,"endColumn":117},{"ruleId":"103","severity":1,"message":"109","line":200,"column":37,"nodeType":"105","messageId":"106","endLine":203,"endColumn":39},{"ruleId":"103","severity":1,"message":"108","line":58,"column":37,"nodeType":"105","messageId":"106","endLine":62,"endColumn":44},{"ruleId":"103","severity":1,"message":"104","line":79,"column":37,"nodeType":"105","messageId":"106","endLine":85,"endColumn":44},{"ruleId":"103","severity":1,"message":"109","line":98,"column":37,"nodeType":"105","messageId":"106","endLine":103,"endColumn":46},{"ruleId":"99","severity":1,"message":"110","line":4,"column":5,"nodeType":"101","messageId":"102","endLine":4,"endColumn":11},{"ruleId":"99","severity":1,"message":"111","line":4,"column":13,"nodeType":"101","messageId":"102","endLine":4,"endColumn":18},{"ruleId":"99","severity":1,"message":"112","line":4,"column":20,"nodeType":"101","messageId":"102","endLine":4,"endColumn":31},{"ruleId":"99","severity":1,"message":"113","line":4,"column":33,"nodeType":"101","messageId":"102","endLine":4,"endColumn":42},{"ruleId":"99","severity":1,"message":"114","line":4,"column":44,"nodeType":"101","messageId":"102","endLine":4,"endColumn":48},{"ruleId":"99","severity":1,"message":"115","line":4,"column":50,"nodeType":"101","messageId":"102","endLine":4,"endColumn":59},{"ruleId":"99","severity":1,"message":"116","line":4,"column":61,"nodeType":"101","messageId":"102","endLine":4,"endColumn":66},{"ruleId":"99","severity":1,"message":"117","line":4,"column":68,"nodeType":"101","messageId":"102","endLine":4,"endColumn":73},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'RenderCard' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'Button' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.","no-global-assign","no-unsafe-negation"]